name: Release

on:
    push:
        tags:
            - 'v*'
    workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Version-Check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Check version consistency
        run: npm run check-version

      - name: Verify tag version matches package versions
        if: startsWith(github.ref, 'refs/tags/')
        shell: node
        run: |
          const tag = process.env.GITHUB_REF_NAME.replace(/^v/, '');
          const pkg = require('./package.json').version;
          if (tag !== pkg) {
            console.error(`❌ Git tag version (${tag}) does not match package version (${pkg})`);
            process.exit(1);
          }
          echo "VERSION=$pkg" >> $GITHUB_ENV
          console.log(`✅ Git tag version matches package version: ${tag}`);

  Lint:
    needs: Version-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Install frontend dependencies
        run: npm install
      
      - name: Lint JavaScript/TypeScript Frontend
        run: npx eslint 'src/**/*.{js,jsx,ts,tsx}' --no-fix --max-warnings=0 
      
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Lint Rust Backend
        run: |
          find src-tauri/src -name '*.rs' | xargs rustfmt --check

  Build-and-Release:
    needs: [Version-Check, Lint]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x64
            extension: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: x64
            extension: .zip
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: arm64
            extension: .zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
            extension: .AppImage
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
            extension: .deb
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
            extension: .rpm

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # Additional dependencies for RPM building
          sudo apt-get install -y rpm

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app
        run: npm run tauri build
        env:
          RUST_TARGET: ${{ matrix.target }}

      - name: Prepare release artifact
        shell: bash
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          ARTIFACT_NAME="SJMC_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.extension }}"
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            # For Windows, copy the portable exe
            cp "src-tauri/target/release/SJMCL.exe" "$ARTIFACT_NAME"
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            # For MacOS, compress the .app folder
            cd "src-tauri/target/release/bundle/macos"
            zip -r "../../../../../$ARTIFACT_NAME" "SJMCL.app"
            cd "../../../../../"
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            case "${{ matrix.extension }}" in
              .AppImage)
                mv "src-tauri/target/${{ matrix.target }}/release/bundle/appimage/"*.AppImage "$ARTIFACT_NAME"
                ;;
              .deb)
                mv "src-tauri/target/${{ matrix.target }}/release/bundle/deb/"*.deb "$ARTIFACT_NAME"
                ;;
              .rpm)
                mv "src-tauri/target/${{ matrix.target }}/release/bundle/rpm/"*.rpm "$ARTIFACT_NAME"
                ;;
            esac
          fi
          
          echo "ARTIFACT_PATH=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: ${{ env.ARTIFACT_PATH }}

  Create-Release:
    needs: Build-and-Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          
          # Create release notes (you can customize this part)
          echo "Release $VERSION" > release_notes.md
          echo "## Changes" >> release_notes.md
          echo "- Please check the commit history for changes" >> release_notes.md
          
          # Create the release
          gh release create "$GITHUB_REF_NAME" \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            ./**/*{.exe,.zip,.AppImage,.deb,.rpm}
