name: Release

on:
    push:
        tags:
            - 'v*'
    workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Version-Check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Check version consistency
        run: npm run check-version

      - name: Verify tag version matches package versions
        if: startsWith(github.ref, 'refs/tags/')
        id: extract_version
        shell: bash
        run: |
          tag="${GITHUB_REF_NAME#v}"
          pkg_version=$(jq -r '.version' package.json)

          if [ "$tag" != "$pkg_version" ]; then
            echo "❌ Git tag version (${tag}) does not match package version (${pkg_version})"
            exit 1
          fi

          echo "VERSION=$pkg_version" >> $GITHUB_ENV
          echo "VERSION=$pkg_version" >> $GITHUB_OUTPUT
          echo "✅ Git tag version matches package version: ${tag}"

  Lint:
    needs: Version-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install frontend dependencies
        run: npm install

      - name: Lint JavaScript/TypeScript Frontend
        run: npx eslint 'src/**/*.{js,jsx,ts,tsx}' --no-fix --max-warnings=0

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Lint Rust Backend
        run: |
          find src-tauri/src -name '*.rs' | xargs rustfmt --check

  Release:
    needs: Lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_os: windows
            artifact_arch: x64
            artifact_extension: exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_os: macos
            artifact_arch: x64
            artifact_extension: app.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_os: macos
            artifact_arch: arm64
            artifact_extension: app.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_os: linux
            artifact_arch: x64
    steps:
      - name: Create Release Draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: SJMCL ${{ needs.Version-Check.outputs.version }}
          draft: true
          prerelease: false

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install frontend dependencies
        run: npm install
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y rpm


      - name: Build the app
        run: npm run tauri build
        env:
          RUST_TARGET: ${{ matrix.target }}

      - name: Package macOS App
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p build
          app_name="SJMCL"
          app_version="${{ needs.Version-Check.outputs.version }}"
          cd src-tauri/target/release/bundle/macos
          tar czvf "../../build/${app_name}_${app_version}_${{ matrix.artifact_os }}_${{ matrix.artifact_arch }}.tar.gz" "$app_name.app"

      - name: Upload Windows Artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/SJMCL.exe
          asset_name: SJMCL_${{ needs.Version-Check.outputs.version }}_${{ matrix.artifact_os }}_${{ matrix.artifact_arch }}.${{ matrix.artifact_extension }}
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload macOS Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/build/SJMCL_${{ needs.Version-Check.outputs.version }}_${{ matrix.artifact_os }}_${{ matrix.artifact_arch }}.${{ matrix.artifact_extension }}
          asset_name: SJMCL_${{ needs.Version-Check.outputs.version }}_${{ matrix.artifact_os }}_${{ matrix.artifact_arch }}.${{ matrix.artifact_extension }}
          asset_content_type: application/gzip

      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd src-tauri/target/release/bundle
          app_name="SJMCL"
          app_version="${{ needs.Version-Check.outputs.version }}"

          # Upload AppImage
          find appimage -name "${app_name}_*.AppImage" -print0 | while IFS= read -r -d $'\0' file; do
            asset_name="${app_name}_${app_version}_${{ matrix.artifact_os }}_${{ matrix.artifact_arch }}.AppImage"
            mv "$file" "../../build/${asset_name}"
            echo "Uploading ${asset_name}"
            gh release upload ${{ github.ref_name }} "../../build/${asset_name}" --clobber
          done

          # Upload Deb
          find deb -name "${app_name}_*.deb" -print0 | while IFS= read -r -d $'\0' file; do
            asset_name="${app_name}_${app_version}_${{ matrix.artifact_os }}_${{ matrix.artifact_arch }}.deb"
            mv "$file" "../../build/${asset_name}"
            echo "Uploading ${asset_name}"
            gh release upload ${{ github.ref_name }} "../../build/${asset_name}" --clobber
          done

          # Upload RPM
          find rpm -name "${app_name}-*.rpm" -print0 | while IFS= read -r -d $'\0' file; do
            asset_name="${app_name}-${app_version}-${{ matrix.artifact_os }}-${{ matrix.artifact_arch }}.rpm"
            mv "$file" "../../build/${asset_name}"
            echo "Uploading ${asset_name}"
            gh release upload ${{ github.ref_name }} "../../build/${asset_name}" --clobber
          done